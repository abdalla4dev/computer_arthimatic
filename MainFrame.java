/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package computerarthimatic;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.annotation.XmlElement;

/**
 *
 * @author Ado Alla
 */
public class mainFrame extends javax.swing.JFrame {

    private int bit;
    private DefaultTableModel model = new DefaultTableModel();
    private ArrayList<Object[]> rows = new ArrayList<Object[]>();
    private String A;
    private int currentRow;
    private int add_A_M;
    private char carry;
    private String full_C_A_Q;
    private String ShiftLeftValue;
    private int count;
    private String finalProduct;
    private String finalProductBinary;
    private boolean condition = true;
    private String shift;
    private char[] reDividArr;
    private int AInteger;
    private int binaryQInteger;
    private String binaryMbit;
    private String binaryQbit;
    private String binaryQ;
    private String binaryM;
    private int finalProductInt;
    private char C = '0';
    private int rowIdx;
    private int subtractA_M;
    private int finalValueOfA;
    private int sub_A_M;
    private String Q0;
    private int finalValueOfQ;

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();

        jTable1.setModel(model);
        model.addColumn("C");
        model.addColumn("A");
        model.addColumn("Q");
        model.addColumn("M");
        model.addColumn("count");
        model.addColumn("operation");
        jTable1.setRowHeight(25);
        // model.addRow(new Object[]{C, A, binaryQbit, binaryMbit, count});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        M = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Q = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        N = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        multiplicationResult = new javax.swing.JTextField();
        divisionResult = new javax.swing.JTextField();
        remainder = new javax.swing.JTextField();
        intResult = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        binaryResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "inputs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 18), new java.awt.Color(0, 153, 204))); // NOI18N

        jLabel4.setText("operand(M)");

        jLabel5.setText("operand(Q)");

        jLabel6.setText("numberOfBits(n)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(M)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Q)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(N))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Q, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(M, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(N, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 1, 18), new java.awt.Color(0, 153, 204))); // NOI18N

        jButton1.setText("Multiplication");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Division");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jButton1)
                .addGap(40, 40, 40)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("multiplicationResult");

        jLabel3.setText("DivisionResult");

        jLabel9.setText("result");

        jLabel10.setText("ramainder");

        jLabel1.setText("binary:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(multiplicationResult, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(divisionResult, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(binaryResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(intResult, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(remainder))
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(multiplicationResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(intResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(binaryResult, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(divisionResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(remainder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        onMultiply();


    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        binaryResult.setText("");
        M.setText("");
        Q.setText("");
        intResult.setText("");
        multiplicationResult.setText("");
        N.setText("");
        divisionResult.setText("");
        remainder.setText("");
        while (model.getRowCount() > 0) {

            model.removeRow(0);
        }
        rows = new ArrayList<Object[]>();




    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        onDivision();

    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                new mainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JTextField M;
    private javax.swing.JTextField N;
    private javax.swing.JTextField Q;
    private javax.swing.JLabel binaryResult;
    private javax.swing.JTextField divisionResult;
    private javax.swing.JTextField intResult;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField multiplicationResult;
    private javax.swing.JTextField remainder;
    // End of variables declaration                   

    private String numberOfZeroes(int big, int small) {
        int z = big - small;
        String numberOfZeroes = "";
        for (int i = 0; i < z; i++) {
            numberOfZeroes += "0";
        }
        return numberOfZeroes;
    }

    private void onDivision() {
        if ("".equals(N.getText()) || "".equals(M.getText()) || "".equals(Q.getText())) {

            JOptionPane.showMessageDialog(null, "error Complete form");
        }
        condition = true;

        int firstM = Integer.parseInt(M.getText());

        int firstQ = Integer.parseInt(Q.getText());
        int numOfBits = Integer.parseInt(N.getText());
        count = numOfBits;
        binaryM = Integer.toBinaryString(firstM);
        binaryQ = Integer.toBinaryString(firstQ);

        //add num of bits
        binaryMbit = numberOfZeroes(numOfBits, binaryM.length()) + binaryM;
        binaryQbit = numberOfZeroes(numOfBits, binaryQ.length()) + binaryQ;
        A = numberOfZeroes(numOfBits, 0);

        carry = '0';
        //check on Q0=1


        rowIdx = -1;
        rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "intial"});

        while (condition) {
            //shift Left
            full_C_A_Q = A + binaryQbit;

            shift = full_C_A_Q.substring(1, full_C_A_Q.length());
            ShiftLeftValue = shift + "0";

            A = ShiftLeftValue.substring(0, ((ShiftLeftValue.length()) / 2));
            binaryQbit = ShiftLeftValue.substring((ShiftLeftValue.length()) / 2, ShiftLeftValue.length());
            AInteger = Integer.parseInt(A, 2);
            binaryQInteger = Integer.parseInt(binaryQbit, 2);
            rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "shiftright"});
            //subtract A,M

            subtractA_M = Integer.parseInt(A, 2) - firstM;
            A = Integer.toBinaryString(subtractA_M);
            if (subtractA_M < 0) {


                A = A.substring(A.length() - numOfBits, A.length());
                A = numberOfZeroes(numOfBits, A.length()) + A;


            }

            A = numberOfZeroes(numOfBits, A.length()) + A;

            rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "subtract"});
            // check A
            if (subtractA_M < 0) {
                Q0 = binaryQbit.substring(binaryQbit.length() - 1);
                binaryQbit = binaryQbit.substring(0, binaryQbit.length() - 1) + "0";

                //add A+m
                add_A_M = Integer.parseInt(A, 2) + firstM;
                A = Integer.toBinaryString(add_A_M);
                // if we have a carry
                if ((numOfBits - A.length()) < 0) {
                    carry = '1';
                    A = A.substring(A.length() - numOfBits, A.length());
                    A = numberOfZeroes(numOfBits, A.length()) + A;
                    AInteger = Integer.parseInt(A, 2);


                }
                //if addA_m  negative
                if (add_A_M < 0) {
                    A = Integer.toBinaryString(add_A_M);

                    A = A.substring(A.length() - numOfBits, A.length());
                    A = numberOfZeroes(numOfBits, A.length()) + A;
                    AInteger = Integer.parseInt(A, 2);

                }

                count = count - 1;
                rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "adding"});
                if (count == 0) {
                    finalValueOfA = Integer.parseInt(A, 2);
                    finalValueOfQ = Integer.parseInt(binaryQbit, 2);


                    divisionResult.setText(finalValueOfQ + "");
                    remainder.setText(A);
                    binaryResult.setText(binaryQbit);
                    condition = false;
                }

            } else {
                Q0 = binaryQbit.substring(binaryQbit.length() - 1);
                binaryQbit = binaryQbit.substring(0, binaryQbit.length() - 1) + "1";





                count = count - 1;
                rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "Q0=0"});
                if (count == 0) {
                    finalValueOfA = Integer.parseInt(A, 2);
                    finalValueOfQ = Integer.parseInt(binaryQbit, 2);

                    divisionResult.setText(String.valueOf(finalValueOfQ));
                    remainder.setText(A);
                    binaryResult.setText(binaryQbit);
                    condition = false;
                }


            }









        }

        new Thread(new Runnable() {

            @Override
            public void run() {
                for (int i = 0; i < rows.size(); i++) {
                    model.addRow(rows.get(i));
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {
                    }
                }
            }
        }).start();


    }

    private void onMultiply() {
        //new tableFrame().setVisible(true);
        if ("".equals(N.getText()) || "".equals(M.getText()) || "".equals(Q.getText())) {

            JOptionPane.showMessageDialog(null, "error Complete form");
        }
        condition = true;

        int firstM = Integer.parseInt(M.getText());

        int firstQ = Integer.parseInt(Q.getText());
        int numOfBits = Integer.parseInt(N.getText());
        count = numOfBits;
        binaryM = Integer.toBinaryString(firstM);
        binaryQ = Integer.toBinaryString(firstQ);

        //add num of bits
        binaryMbit = numberOfZeroes(numOfBits, binaryM.length()) + binaryM;
        binaryQbit = numberOfZeroes(numOfBits, binaryQ.length()) + binaryQ;
        A = numberOfZeroes(numOfBits, 0);

        carry = '0';
        //check on Q0=1


        rowIdx = -1;
        rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "intial"});


        while (condition) {


            char[] arrQ = binaryQbit.toCharArray();

            if (arrQ[arrQ.length - 1] == '1') {
                //add A,M

                add_A_M = Integer.parseInt(A, 2) + firstM;
                A = Integer.toBinaryString(add_A_M);
                A = numberOfZeroes(numOfBits, A.length()) + A;
                //if we have acarry
                if ((numOfBits - A.length()) == -1) {
                    carry = '1';
                    A = A.substring(1, A.length());

                }

                rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "adding"});


                //shifLeft
                full_C_A_Q = carry + A + binaryQbit;

                shift = full_C_A_Q.substring(0, full_C_A_Q.length() - 1);
                ShiftLeftValue = "0" + shift;
                reDividArr = ShiftLeftValue.toCharArray();
                carry = reDividArr[0];
                A = ShiftLeftValue.substring(1, (ShiftLeftValue.length()) / 2 + 1);
                binaryQbit = ShiftLeftValue.substring((ShiftLeftValue.length() - 1) / 2 + 1, ShiftLeftValue.length());
                AInteger = Integer.parseInt(A, 2);
                binaryQInteger = Integer.parseInt(binaryQbit, 2);



                count = count - 1;
                rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "shiftRight"});



                //check count
                if (count == 0) {
                    //product A,Q

                    finalProduct = A + binaryQbit;
                    finalProductInt = Integer.parseInt(finalProduct, 2);
                    condition = false;
//                    rows.add(new Object[]{"finalresult[A+Q]", finalProduct});
//                    model.addRow(rows.get(++rowIdx));
                    multiplicationResult.setText(finalProduct);

                    intResult.setText(String.valueOf(finalProductInt));

                }



            } else {

                //shifLeft
                full_C_A_Q = carry + A + binaryQbit;
                shift = full_C_A_Q.substring(0, full_C_A_Q.length() - 1);
                ShiftLeftValue = "0" + shift;
                reDividArr = ShiftLeftValue.toCharArray();
                carry = reDividArr[0];
                A = ShiftLeftValue.substring(1, (ShiftLeftValue.length()) / 2 + 1);
                binaryQbit = ShiftLeftValue.substring((ShiftLeftValue.length() - 1) / 2 + 1, ShiftLeftValue.length());
                AInteger = Integer.parseInt(A, 2);
                binaryQInteger = Integer.parseInt(binaryQbit, 2);
                //check count=0
                count = count - 1;

                rows.add(new Object[]{carry, A, binaryQbit, binaryMbit, count, "shiftright"});

                try {
                    Thread.currentThread().sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (count == 0) {
                    //product A,Q

                    finalProduct = A + binaryQbit;

                    finalProductInt = Integer.parseInt(finalProduct, 2);


                    condition = false;

                    multiplicationResult.setText(finalProduct);
                    intResult.setText(String.valueOf(finalProductInt));
//                    rows.add(new Object[]{"Final", finalProduct});
//                    model.addRow(rows.get(++rowIdx));
                }
            }


        }

        new Thread(new Runnable() {

            @Override
            public void run() {
                for (int i = 0; i < rows.size(); i++) {
                    model.addRow(rows.get(i));
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {
                    }
                }
            }
        }).start();

    }
}
